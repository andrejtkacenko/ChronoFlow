
'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { MessageSquare, Send, X, Bot, User, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { chatAssistantFlow } from '@/ai/flows/chat-flow';
import { useToast } from '@/hooks/use-toast';
import type { MessageData, ToolRequestPart, ToolResponsePart } from 'genkit';

type ChatMessage = {
  role: 'user' | 'model';
  content: string; 
};

export default function ChatAssistant({ userId }: { userId: string }) {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage: ChatMessage = { role: 'user', content: input };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);

    try {
      const history: MessageData[] = newMessages.map(
        (msg): MessageData => ({
          role: msg.role,
          content: [{ text: msg.content }], // Correctly format content as an array of parts
        })
      );

      const response = await chatAssistantFlow({ userId, history });

      const toolRequest = response.content.find(
        (part): part is ToolRequestPart => part.toolRequest !== undefined
      )?.toolRequest;

      // Check if there's a text response to display immediately
      const initialTextResponse = response.text;
      if (initialTextResponse) {
          const initialModelMessage: ChatMessage = { role: 'model', content: initialTextResponse };
          setMessages(prev => [...prev, initialModelMessage]);
      }

      if (toolRequest) {
        // AI wants to use a tool.
        // We're simulating the tool execution as the flow runs it on the server.
        // We just need to send back the confirmation.
        const toolResponse: MessageData = {
          role: 'model', // This should be 'tool' but Genkit client treats it as 'model' with tool_response part
          content: [{
              toolResponse: {
                name: toolRequest.name,
                // The actual output is generated by the server-side tool function.
                // The client just confirms the tool call happened. We pass a dummy output.
                output: { success: true, message: 'Tool executed on server.' },
              }
            } as ToolResponsePart
          ]
        };

        const finalHistory = [...history, response, toolResponse];
        const finalResponse = await chatAssistantFlow({userId, history: finalHistory});

        const finalTextResponse = finalResponse.text;
        if(finalTextResponse) {
          const finalModelMessage: ChatMessage = { role: 'model', content: finalTextResponse };
          setMessages(prev => [...prev, finalModelMessage]);
        }
        
      } else if (!initialTextResponse) {
        // If there was no tool request and no initial text, something is wrong.
        toast({
          variant: 'destructive',
          title: 'Chat Error',
          description: 'Received an empty response from the assistant.',
        });
      }

    } catch (error: any) {
      console.error("Chat assistant error:", error);
      toast({
        variant: 'destructive',
        title: 'Chat Error',
        description: error.message || 'Sorry, I encountered an issue. Please try again.',
      });
      // Revert the optimistic UI update on error
      setMessages(messages);
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <>
      <div className="fixed bottom-4 right-4 z-50">
        <Button
          onClick={() => setIsOpen(!isOpen)}
          size="icon"
          className="rounded-full w-14 h-14 shadow-lg"
          aria-label="Toggle Chat Assistant"
        >
          {isOpen ? <X className="h-6 w-6" /> : <MessageSquare className="h-6 w-6" />}
        </Button>
      </div>

      {isOpen && (
        <Card className="fixed bottom-20 right-4 z-50 w-full max-w-sm h-[60vh] flex flex-col shadow-2xl animate-in fade-in-0 zoom-in-95 slide-in-from-bottom-4">
          <CardHeader className="flex flex-row items-center justify-between border-b">
            <CardTitle className="flex items-center gap-2 text-lg">
              <Bot className="text-primary" /> AI Assistant
            </CardTitle>
          </CardHeader>
          <CardContent className="flex-1 p-0 overflow-hidden">
            <ScrollArea className="h-full p-4" ref={scrollAreaRef as any}>
              <div className="space-y-4">
                {messages.map((message, index) => {
                  return (
                    <div
                      key={index}
                      className={cn(
                        'flex items-start gap-3',
                        message.role === 'user' ? 'justify-end' : 'justify-start'
                      )}
                    >
                      {message.role === 'model' && <Bot className="flex-shrink-0 text-primary" />}
                      <div
                        className={cn(
                          'max-w-[80%] rounded-lg px-3 py-2 text-sm',
                          message.role === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        )}
                      >
                       <p>{message.content}</p>
                      </div>
                      {message.role === 'user' && <User className="flex-shrink-0" />}
                    </div>
                  );
                })}
                {isLoading && (
                   <div className="flex items-start gap-3 justify-start">
                        <Bot className="flex-shrink-0 text-primary" />
                        <div className="bg-muted rounded-lg px-3 py-2 text-sm flex items-center">
                            <Loader2 className="h-4 w-4 animate-spin" />
                        </div>
                   </div>
                )}
              </div>
            </ScrollArea>
          </CardContent>
          <CardFooter className="border-t p-4">
            <form onSubmit={handleSubmit} className="flex w-full items-center gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask me to create a task..."
                className="flex-1"
                disabled={isLoading}
              />
              <Button type="submit" size="icon" disabled={isLoading || !input.trim()}>
                <Send className="h-4 w-4" />
              </Button>
            </form>
          </CardFooter>
        </Card>
      )}
    </>
  );
}
